{"version":3,"sources":["../src/sprintf.js"],"names":["window","re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","arguments","cache","hasOwnProperty","parse","format","call","parse_tree","argv","cursor","tree_length","length","node_type","arg","output","i","k","match","pad","pad_character","pad_length","is_positive","get_type","Error","test","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","parseFloat","toExponential","toFixed","toPrecision","substring","valueOf","toUpperCase","replace","charAt","str_repeat","join","fmt","_fmt","arg_names","exec","field_list","replacement_field","field_match","SyntaxError","vsprintf","_argv","slice","splice","apply","variable","Object","prototype","toLowerCase","preformattedPadding","input","multiplier","Array","exports","define","amd"],"mappings":"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","file":"sprintf.js","sourcesContent":["/* globals window, exports, define */\r\n\r\n(function(window) {\r\n    'use strict'\r\n\r\n    var re = {\r\n        not_string: /[^s]/,\r\n        not_bool: /[^t]/,\r\n        not_type: /[^T]/,\r\n        not_primitive: /[^v]/,\r\n        number: /[diefg]/,\r\n        numeric_arg: /bcdiefguxX/,\r\n        json: /[j]/,\r\n        not_json: /[^j]/,\r\n        text: /^[^\\x25]+/,\r\n        modulo: /^\\x25{2}/,\r\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\r\n        key: /^([a-z_][a-z_\\d]*)/i,\r\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\r\n        index_access: /^\\[(\\d+)\\]/,\r\n        sign: /^[\\+\\-]/\r\n    }\r\n\r\n    function sprintf() {\r\n        var key = arguments[0], cache = sprintf.cache\r\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\r\n            cache[key] = sprintf.parse(key)\r\n        }\r\n        return sprintf.format.call(null, cache[key], arguments)\r\n    }\r\n\r\n    sprintf.format = function(parse_tree, argv) {\r\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ''\r\n        for (i = 0; i < tree_length; i++) {\r\n            node_type = get_type(parse_tree[i])\r\n            if (node_type === 'string') {\r\n                output[output.length] = parse_tree[i]\r\n            }\r\n            else if (node_type === 'array') {\r\n                match = parse_tree[i] // convenience purposes only\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor]\r\n                    for (k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]))\r\n                        }\r\n                        arg = arg[match[2][k]]\r\n                    }\r\n                }\r\n                else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]]\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++]\r\n                }\r\n\r\n                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && get_type(arg) == 'function') {\r\n                    arg = arg()\r\n                }\r\n\r\n                if (re.numeric_arg.test(match[8]) && (get_type(arg) != 'number' && isNaN(arg))) {\r\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\r\n                }\r\n\r\n                if (re.number.test(match[8])) {\r\n                    is_positive = arg >= 0\r\n                }\r\n\r\n                switch (match[8]) {\r\n                    case 'b':\r\n                        arg = parseInt(arg, 10).toString(2)\r\n                    break\r\n                    case 'c':\r\n                        arg = String.fromCharCode(parseInt(arg, 10))\r\n                    break\r\n                    case 'd':\r\n                    case 'i':\r\n                        arg = parseInt(arg, 10)\r\n                    break\r\n                    case 'j':\r\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\r\n                    break\r\n                    case 'e':\r\n                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()\r\n                    break\r\n                    case 'f':\r\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'g':\r\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\r\n                    break\r\n                    case 'o':\r\n                        arg = arg.toString(8)\r\n                    break\r\n                    case 's':\r\n                        arg = String(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 't':\r\n                        arg = String(!!arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'T':\r\n                        arg = get_type(arg)\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'u':\r\n                        arg = parseInt(arg, 10) >>> 0\r\n                    break\r\n                    case 'v':\r\n                        arg = arg.valueOf()\r\n                        arg = (match[7] ? arg.substring(0, match[7]) : arg)\r\n                    break\r\n                    case 'x':\r\n                        arg = parseInt(arg, 10).toString(16)\r\n                    break\r\n                    case 'X':\r\n                        arg = parseInt(arg, 10).toString(16).toUpperCase()\r\n                    break\r\n                }\r\n                if (re.json.test(match[8])) {\r\n                    output[output.length] = arg\r\n                }\r\n                else {\r\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\r\n                        sign = is_positive ? '+' : '-'\r\n                        arg = arg.toString().replace(re.sign, '')\r\n                    }\r\n                    else {\r\n                        sign = ''\r\n                    }\r\n                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '\r\n                    pad_length = match[6] - (sign + arg).length\r\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : '') : ''\r\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\r\n                }\r\n            }\r\n        }\r\n        return output.join('')\r\n    }\r\n\r\n    sprintf.cache = {}\r\n\r\n    sprintf.parse = function(fmt) {\r\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\r\n        while (_fmt) {\r\n            if ((match = re.text.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = match[0]\r\n            }\r\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\r\n                parse_tree[parse_tree.length] = '%'\r\n            }\r\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1\r\n                    var field_list = [], replacement_field = match[2], field_match = []\r\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\r\n                        field_list[field_list.length] = field_match[1]\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\r\n                                field_list[field_list.length] = field_match[1]\r\n                            }\r\n                            else {\r\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\r\n                    }\r\n                    match[2] = field_list\r\n                }\r\n                else {\r\n                    arg_names |= 2\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\r\n                }\r\n                parse_tree[parse_tree.length] = match\r\n            }\r\n            else {\r\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\r\n            }\r\n            _fmt = _fmt.substring(match[0].length)\r\n        }\r\n        return parse_tree\r\n    }\r\n\r\n    var vsprintf = function(fmt, argv, _argv) {\r\n        _argv = (argv || []).slice(0)\r\n        _argv.splice(0, 0, fmt)\r\n        return sprintf.apply(null, _argv)\r\n    }\r\n\r\n    /**\r\n     * helpers\r\n     */\r\n    function get_type(variable) {\r\n        if (typeof variable === 'number') {\r\n            return 'number'\r\n        }\r\n        else if (typeof variable === 'string') {\r\n            return 'string'\r\n        }\r\n        else {\r\n            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\r\n        }\r\n    }\r\n\r\n    var preformattedPadding = {\r\n        '0': ['', '0', '00', '000', '0000', '00000', '000000', '0000000'],\r\n        ' ': ['', ' ', '  ', '   ', '    ', '     ', '      ', '       '],\r\n        '_': ['', '_', '__', '___', '____', '_____', '______', '_______'],\r\n    }\r\n    function str_repeat(input, multiplier) {\r\n        if (multiplier >= 0 && multiplier <= 7 && preformattedPadding[input]) {\r\n            return preformattedPadding[input][multiplier]\r\n        }\r\n        return Array(multiplier + 1).join(input)\r\n    }\r\n\r\n    /**\r\n     * export to either browser or node.js\r\n     */\r\n    if (typeof exports !== 'undefined') {\r\n        exports.sprintf = sprintf\r\n        exports.vsprintf = vsprintf\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        window.sprintf = sprintf\r\n        window.vsprintf = vsprintf\r\n\r\n        if (typeof define === 'function' && define.amd) {\r\n            define(function() {\r\n                return {\r\n                    sprintf: sprintf,\r\n                    vsprintf: vsprintf\r\n                }\r\n            })\r\n        }\r\n    }\r\n})(typeof window === 'undefined' ? this : window);\r\n"]}